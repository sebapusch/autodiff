#include "../test.h"

TEST(TensorMath, PlusEqNumCorrect) {
    Tensor t1{{2, 3}, vector<double>{
        1.6, 1.5, 4.5,
        1.2, 5.3, 2.5,
    }};

    vector<double> result{
        3.6, 3.5, 6.5,
        3.2, 7.3, 4.5,
    };

    t1 += 2.0;

    size_t i = 0;
    for_each(t1.begin(), t1.end(), [&i, &result](double val) {
        EXPECT_DOUBLE_EQ(result[i++], val);
    });
}

TEST(TensorMath, TimesEqNumCorrect) {
    Tensor t1{{2, 3}, vector<double>{
        1.6, 1.5, 4.5,
        1.2, 5.3, 2.5,
    }};

    vector<double> result{
        3.2, 3.0, 9.0,
        2.4, 10.6, 5.0,
    };

    t1 *= 2.0;

    size_t i = 0;
    for_each(t1.begin(), t1.end(), [&i, &result](double val) {
        EXPECT_DOUBLE_EQ(result[i++], val);
    });
}

TEST(TensorMath, MinusEqNumCorrect) {
    Tensor t1{{2, 3}, vector<double>{
        1.6, 1.5, 4.5,
        1.2, 5.3, 2.5,
    }};

    vector<double> result{
        -0.4, -0.5, 2.5,
        -0.8, 3.3, 0.5,
    };

    t1 -= 2.0;

    size_t i = 0;
    for_each(t1.begin(), t1.end(), [&i, &result](double val) {
        EXPECT_DOUBLE_EQ(result[i++], val);
    });
}

//////////////
// Addition //
//////////////


TEST(Tensor, TensorAddBroadcast_Case0) {
    Tensor t1{{2, 3}, {-4.923177418679636, 7.430672008809751, 0.4166969155952529, 6.826278544259829, 8.666454870123811, -4.409505578626884}};

    Tensor t2{{2, 3}, {-7.044002091203647, -1.7071778552138923, 7.8734805338986575, -4.300944348537447, 3.626712476254353, -4.177562753365218}};

    Tensor res = t1 + t2;

    EXPECT_THAT(res.shape(), ::testing::ContainerEq(std::vector<size_t>{2, 3}));
    EXPECT_THAT(res.data(), ::testing::ElementsAre(-11.967179509883284, 5.723494153595858, 8.29017744949391, 2.5253341957223814, 12.293167346378164, -8.587068331992104));
}

TEST(Tensor, TensorAddBroadcast_Case1) {
    Tensor t1{{1, 3}, {-0.65483697801338, 9.92221627717851, 4.454794805265415}};

    Tensor t2{{2, 3}, {3.859633901340466, -7.161666168662874, -4.464465496626695, 9.60926049371896, 0.7834489615989639, -0.16586638378328544}};

    Tensor res = t1 + t2;

    EXPECT_THAT(res.shape(), ::testing::ContainerEq(std::vector<size_t>{2, 3}));
    EXPECT_THAT(res.data(), ::testing::ElementsAre(3.204796923327086, 2.760550108515636, -0.00967069136128007, 8.95442351570558, 10.705665238777474, 4.2889284214821295));
}

TEST(Tensor, TensorAddBroadcast_Case2) {
    Tensor t1{{2, 1}, {8.750465671805838, 9.604122523304838}};

    Tensor t2{{2, 3}, {1.823836112806628, -3.257137808443291, 8.041940320865844, 6.624713287362933, 0.6933693225086444, 4.064536253760689}};

    Tensor res = t1 + t2;

    EXPECT_THAT(res.shape(), ::testing::ContainerEq(std::vector<size_t>{2, 3}));
    EXPECT_THAT(res.data(), ::testing::ElementsAre(10.574301784612466, 5.493327863362547, 16.792405992671682, 16.22883581066777, 10.297491845813482, 13.668658777065527));
}

TEST(Tensor, TensorAddBroadcast_Case3) {
    Tensor t1{{1, 1}, {-2.0610356599271213}};

    Tensor t2{{2, 3}, {1.528297380960149, 1.9974714480622762, -1.3246653984252674, -2.3915939902360073, -9.588405528592975, -0.9230748091145919}};

    Tensor res = t1 + t2;

    EXPECT_THAT(res.shape(), ::testing::ContainerEq(std::vector<size_t>{2, 3}));
    EXPECT_THAT(res.data(), ::testing::ElementsAre(-0.5327382789669723, -0.06356421186484518, -3.3857010583523888, -4.452629650163129, -11.649441188520097, -2.9841104690417133));
}

TEST(Tensor, TensorAddBroadcast_Case4) {
    Tensor t1{{2, 3, 4}, {5.695932083085246, 1.7966262622917561, 3.23704276055013, -4.164061636408682, -4.396248705333279, -0.7645620975725631, -7.488673006398365, 0.589181079712942, 4.24576499219288, -2.7162554707365576, -5.0743405224555005, -7.974549642486459, -7.015586933510665, 7.6686484786894376, 2.7614080826285115, 6.298523271944099, 4.0845983546641875, -0.050257873405435305, -2.293440173992729, 2.162160587940985, -3.9097655995789786, 1.5477310877198196, 8.295136226749612, 0.08300966983966518}};

    Tensor t2{{1, 3, 1}, {6.29486047623039, -0.19336849071773443, -2.427598236304423}};

    Tensor res = t1 + t2;

    EXPECT_THAT(res.shape(), ::testing::ContainerEq(std::vector<size_t>{2, 3, 4}));
    EXPECT_THAT(res.data(), ::testing::ElementsAre(11.990792559315636, 8.091486738522146, 9.53190323678052, 2.1307988398217077, -4.589617196051013, -0.9579305882902975, -7.682041497116099, 0.39581258899520755, 1.8181667558884573, -5.14385370704098, -7.501938758759923, -10.402147878790881, -0.720726457280275, 13.963508954919828, 9.056268558858902, 12.593383748174489, 3.891229863946453, -0.24362636412316974, -2.4868086647104635, 1.9687920972232504, -6.3373638358834015, -0.8798671485846032, 5.867537990445189, -2.3445885664647577));
}

TEST(Tensor, TensorAddBroadcast_Case5) {
    Tensor t1{{2, 1, 2}, {-0.3615963280330874, -9.572483230310487, -6.602940767999208, -6.088848679113568}};

    Tensor t2{{1, 2, 1}, {5.795076650848047, 7.258223526694195}};

    Tensor res = t1 + t2;

    EXPECT_THAT(res.shape(), ::testing::ContainerEq(std::vector<size_t>{2, 2, 2}));
    EXPECT_THAT(res.data(), ::testing::ElementsAre(5.43348032281496, -3.77740657946244, 6.896627198661108, -2.314259703616292, -0.8078641171511602, -0.2937720282655203, 0.6552827586949874, 1.1693748475806274));
}

TEST(Tensor, TensorAddBroadcast_Case6) {
    Tensor t1{{1}, {1.1417377823976764}};

    Tensor t2{{3, 2, 4}, {-8.683598146956921, -0.7829100688022343, 7.6246590610852, -2.912944861790394, 8.966419282606761, -0.027656459878519613, -7.850738253227407, 8.81519735893319, -3.9850766834660556, -6.253905625050564, -5.984999404002287, 2.783202676865514, 4.085903666440089, 9.246792517719943, 1.9407543604826216, 8.877329179763272, -4.974023952016515, -6.926963625682854, 5.644512525336475, 7.2673653148613475, 8.430473951632703, -9.31260250241581, 8.8094896490848, 2.5360339147692557}};

    Tensor res = t1 + t2;

    EXPECT_THAT(res.shape(), ::testing::ContainerEq(std::vector<size_t>{3, 2, 4}));
    EXPECT_THAT(res.data(), ::testing::ElementsAre(-7.541860364559245, 0.3588277135954421, 8.766396843482877, -1.7712070793927177, 10.108157065004438, 1.1140813225191568, -6.70900047082973, 9.956935141330867, -2.843338901068379, -5.112167842652887, -4.8432616216046105, 3.9249404592631905, 5.227641448837765, 10.388530300117619, 3.082492142880298, 10.019066962160949, -3.832286169618839, -5.785225843285177, 6.786250307734152, 8.409103097259024, 9.572211734030379, -8.170864720018134, 9.951227431482476, 3.677771697166932));
}

////////////////
// / Addition //
////////////////
