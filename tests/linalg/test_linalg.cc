#include "../test.h"

constexpr double kAbsTol = 1e-12;

TEST(LinearAlgebra, Matmul_Standard2D) {
    Tensor t1{{2, 3}, {3.4496132267375774, -2.436165209909646, -0.26046846392139855, 7.670161793349173, 1.707949577536434, -1.3823820292815867}};
    Tensor t2{{3, 4}, {-0.7607180402892695, -4.614179388322013, -0.919469698392291, 4.414091210991302, -1.1976376441495002, 2.4640452975908307, 9.101010771912826, -1.5734232046690888, -0.1279875297849653, -6.351488558291889, 9.784566231246139, -8.575675058509702}};

    Tensor res = matmul(t1, t2);

    EXPECT_THAT(res.shape(), ::testing::ContainerEq(std::vector<size_t>{2, 4}));

    std::vector<double> expected{0.3267968644395921, -20.265593209735137, -27.891951587095285, 21.293719206720137, -7.703407495358204, -22.40285368474554, -5.034422370097917, 43.024325351045405};
    size_t i = 0;
    std::for_each(res.data().begin(), res.data().end(), [&i, &expected](double val) {
        EXPECT_NEAR(expected[i++], val, kAbsTol);
    });
}

TEST(LinearAlgebra, Matmul_VectorMat) {
    Tensor t1{{4}, {-7.597878106149405, -6.295746794258488, 5.035496699402373, -4.670960898040734}};
    Tensor t2{{4, 5}, {3.8603095647251866, 4.204840151367801, -0.004780854486872599, -2.999528225422483, 8.78064322535791, -7.708369611263786, -4.047238616722641, -0.7145997876848202, -7.696814501496696, 8.481330726910802, -4.476959363723402, -8.886507739870472, 9.099486271571624, -3.8637469907176296, 6.575922183516742, -7.734907706266927, -6.194077967698459, -7.0865761315995, -5.16330798723196, 4.378694723054906}};

    Tensor res = matmul(t1, t2);
    EXPECT_THAT(res.shape(), ::testing::ContainerEq(std::vector<size_t>{5}));

    std::vector<double> expected{32.78551909082791, -22.283157785900926, 83.45681677057516, 75.90896955033215, -107.45024504007202};

    size_t i = 0;
    std::for_each(res.data().begin(), res.data().end(), [&i, &expected](double val) {
        EXPECT_NEAR(expected[i++], val, kAbsTol);
    });
}

TEST(LinearAlgebra, Matmul_MatVec) {
    Tensor t1{{5, 4}, {1.6125322627920031, -2.89569383887266, 2.566993912415832, 4.870260953836855, -4.193311770256443, 2.4187545491776667, 5.522587665780204, 1.0932900996142596, -2.7635189796446973, -5.516898165004529, 8.671466984573357, -9.717614268329251, 0.10530275697338176, -1.055168354253679, 1.0042955926384565, -3.8036089063252287, 4.442119750874456, 5.163219453143586, -1.1296307952867313, 6.844588722069648}};
    Tensor t2{{4}, {-4.060590883245581, 1.8067561649824597, -8.220267221129497, 4.454079523659388}};

    Tensor res = matmul(t1, t2);

    EXPECT_THAT(res.shape(), ::testing::ContainerEq(std::vector<size_t>{5}));

    std::vector<double> expected{-11.18849282622573, -19.130122080499845, -113.31097234056159, -27.531178030251375, 31.063257088752948};

    size_t i = 0;
    std::for_each(res.data().begin(), res.data().end(), [&i, &expected](double val) {
        EXPECT_NEAR(expected[i++], val, kAbsTol);
    });
}

TEST(LinearAlgebra, Matmul_BatchedMatMul) {
    Tensor t1{{2, 3, 4}, {-6.726135143236358, 7.1159599071571975, 1.2398333111905586, -9.640534006697015, 5.488515325626972, 4.418500027558938, 0.4904705198803292, -9.508219917771324, 8.725524338596074, 2.0285036009459567, 7.427912181286057, 1.625325740939342, -6.283353103164007, 6.70614199579942, -0.3346209022755353, 6.550418168956298, 5.937190214565398, 3.0356599468680088, 5.593982485496644, -5.516534369822352, 8.011242484872188, 0.3592721101897478, 6.48064882245367, 1.3774250863620594}};
    Tensor t2{{4, 5}, {-5.840460903571392, -8.012307568739946, -0.010468118149194794, -6.286566942157517, -7.674159335699626, -3.3771282257037143, -1.4696756592266986, -4.991737809894694, 2.432119567488062, -9.214844209960171, 7.107861072402503, -8.586298132534697, -2.160019665791535, -6.148846253995712, 6.049184218561944, 7.744704180281378, -2.340082744680574, 7.795294973132069, 2.5647793463032915, -1.3117498897405415}};

    Tensor res = matmul(t1, t2);

    EXPECT_THAT(res.shape(), ::testing::ContainerEq(std::vector<size_t>{2, 3, 5}));

    std::vector<double> expected{-50.59830081215892, 55.34777928298656, -113.27946676007353, 27.241777252806976, 6.190920373894494, -117.12945456509848, -32.43073957216902, -97.29225297434856, -51.159912515709756, -67.39617756365573, 7.572634373332166, -140.47449227798745, -13.591640751343341, -91.42451765896183, -42.85262044154157, 62.40278881318256, 28.03293826770099, 18.375701877580468, 74.66876878544545, -24.193294657148748, -47.89041666170811, -87.15448410620543, -70.3014945643569, -78.48668744092676, -32.460733276193594, 8.728644807446168, -123.58462383047046, -5.13814886133282, -85.80514126458466, -27.394386452550048};
    size_t i = 0;
    std::for_each(res.data().begin(), res.data().end(), [&i, &expected](double val) {
        EXPECT_NEAR(expected[i++], val, kAbsTol);
    });
}
TEST(LinearAlgebra, Matmul_BroadcastedBatched) {
    Tensor t1{{2, 1, 3, 4}, {8.435963393906675, -4.790326426174496, 6.156817005763813, 6.00424237110116, -2.5040974459716114, 8.695431670859747, -3.7092611203398995, 5.790496796700477, 3.1558111340045585, -7.469245047441739, -3.639009486738926, 6.670142981503119, 2.1819104348138723, 6.942092803418188, -2.1865151799542186, 9.838600279628643, -1.703833512670375, -0.6218069758917792, 8.344691744467077, 8.790984784003072, -9.322620381698727, -9.306697762008909, 5.030645342498266, 5.894958507328148}};
    Tensor t2{{1, 3, 4, 5}, {-6.1151167126729415, -2.644025541737194, 2.509678139449056, 2.3723288682068873, -1.7434760210475595, -6.925825509914674, -2.7731580245889687, -4.2089367761338625, 7.011318716299478, 2.270152768946655, 2.0724785493306612, 1.7038984137976776, -5.044207618758351, -2.345210465721417, -9.888767035137372, 1.8842337456311284, 3.574514908186181, 4.040774617543136, 4.166460131556182, 4.337114158137252, 4.206008319167832, -0.8189821778730035, -9.158723319683233, -3.637053494933811,
        3.405016304188564, 1.8949557791285798, -6.610849047020187, -3.387409387755385, -3.0666027556335873, 6.980740486987148, -4.416644393617723, 4.025705263134773, 0.22945666300230094, -8.011236970313398, -8.235756121718552, -5.6088768067811205, -4.302924015586749, 8.571409341836311, 9.700034015954188, 2.905544891569443, 0.9108733736143542, 6.041606818214774, -3.703504938271765, -5.227366923225096, 0.8134898584359984, 8.260004643996805, -2.4837265683157757, 6.291795817813757, 3.9786701514707943,
        -7.020704597497753, 4.015335625750991, 5.167367669595928, -8.953511348915386, 2.428836583594073, 3.754431812916316, 4.493399435951517, -9.743506194175689, -6.387384013775952, -2.8377827266535434, -6.864539591406387}};

    Tensor res = matmul(t1, t2);

    EXPECT_THAT(res.shape(), ::testing::ContainerEq(std::vector<size_t>{2, 3, 3, 5}));

    std::vector<double> expected{5.663331494818656, 22.932274084524934, 34.539260902639555, -2.9962210565754286, -60.42491714362958, -41.68690898119645, -3.114895522860329, -0.7746250807910966, 87.8507722051916, 85.8998568673586, 37.45887387364081, 30.011374632594965, 84.66611421815813, -8.557507804576039, 42.456080249410256, -34.46525161882372, 23.708953146839008, -8.158316118166722, -7.074386702365471, -37.975880327713064, -10.150492044190427, -95.2818347380184, 42.26095245895796, 68.3258873613253,
        99.54717765198491, -22.220320603971132, 3.442800362488109, 52.735720657204936, 105.28093467804746, 7.955121577666686, 19.817121857928147, 36.17679938347763, -154.85892053288993, -65.24183768372663, 22.39302759075883, 80.66847701284632, -112.31270426428424, 60.20860274385863, 22.244729709003956, -116.760377453146, -43.461682168644984, -46.17694699364862, -68.70537878208411, -73.98122096877474, -4.443290164322839, -47.4156435471834, 6.422076343677517, 27.041866028179204, 99.96940841412227,
        76.24857447918227, 48.584132233350076, 51.871361526392846, -8.228896966745253, 8.655488890600651, -42.832212025273165, 142.99886078543923, 80.10151567331528, 14.219105044531087, -74.6053581731523, -29.053632429952838, -23.19434459090403, -98.81708844446888, 40.32973555684826, 83.72708273417626, 102.48448946327105, -94.50772132466632, 1.272411262138365, 94.97712873587263, 26.525317047206887, -53.324499209288454, -112.12946718750422, 64.04657087475837, 168.591313570937, 79.32642013538855,
        -121.01441786354695, 94.75833156269456, -111.22100599241455, -7.668415268514081, -17.01584699832104, -122.7100041450547, 66.32003902906764, -51.28441802360061, -128.46781461421102, 1.7535859093176358, -26.037015131454012, -38.676960716434635, -64.65068499744417, -106.72477533341697, 7.194480847122905, 36.176757480820164};

    size_t i = 0;
    std::for_each(res.data().begin(), res.data().end(), [&i, &expected](double val) {
        EXPECT_NEAR(expected[i++], val, kAbsTol);
    });
}
